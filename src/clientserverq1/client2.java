/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clientserverq1;

import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;

/**
 *
 * @author shubham
 */
public class client2 extends javax.swing.JFrame {

    /**
     * Creates new form client2
     */
    public client2() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Client 2");

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("Vowel");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Consonant");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("Ok");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(122, 122, 122)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(91, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(205, 205, 205))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton1)
                            .addComponent(jRadioButton2))
                        .addGap(174, 174, 174))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(211, 211, 211))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(200, 200, 200))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addComponent(jRadioButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton2)
                .addGap(18, 18, 18)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int selected=0;
        while(true){
            if(jRadioButton1.isSelected())
            {
                selected=1;
                break;
            }
            if(jRadioButton2.isSelected())
            {
                selected=2;
                break;
            }
            else{
                jLabel2.setText("Please choose an option.");
            }
        }
        HashMap<Character,Integer> frequencies = new HashMap<>();
        switch(selected){
            case 1:
                System.out.println("Vowels in "+jTextField1.getText()+" are:- ");
                try{
                DatagramSocket clientSocket = new DatagramSocket(9001);
                InetAddress IPAddress = InetAddress.getByName("localhost");
                byte[] sendData = new byte[1024];
                byte[] receiveData = new byte[1024];
                String sentence = "vow,".concat(jTextField1.getText()).trim();
                System.out.println("sentence send:- "+sentence.trim());
                sendData = sentence.getBytes();
                System.out.println("sendData= "+sendData.toString());
                System.out.println("length of senddata= "+sendData.length);
                DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, 9876);
                clientSocket.send(sendPacket);
                DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
//                System.out.println(clientSocket.getPort());
                clientSocket.receive(receivePacket);
//                System.out.println(clientSocket.getPort());
                String modifiedSentence = new String(receivePacket.getData());
                for (char ch : modifiedSentence.toCharArray()) 
                   frequencies.put(ch, frequencies.getOrDefault(ch, 0) + 1);
                System.out.println("Vowels are:- " + modifiedSentence);
                String result="";
//                for (char i : frequencies.keySet()){
//                    result+="Frequency of "+i+" is "+ );
//                }
                for (Map.Entry<Character, Integer> entry : frequencies.entrySet()) {
                    char key = entry.getKey();
                    int value = entry.getValue();
                     result+="Frequency of "+key+" is "+value+"\n";
// ...
}
//                jLabel2.setText("Vowels in the given text are: - "+modifiedSentence);
//                jLabel1.setText(result);
                    JOptionPane.showMessageDialog(null, result);
                jTextField1.setText("");
                clientSocket.close();
                } catch (Exception ex) {
//                    Logger.getLogger(client1.class.getName()).log(Level.SEVERE, null, ex);
                    System.out.println("exception:- "+ex);
                }
                //make a call to the server.
                //print the SI
                break;
            case 2:
                System.out.println("Constants in "+jTextField1.getText()+" are:- ");
                try{
                DatagramSocket clientSocket = new DatagramSocket(9001);
                InetAddress IPAddress = InetAddress.getByName("localhost");
                byte[] sendData = new byte[1024];
                byte[] receiveData = new byte[1024];
                String sentence = "con,".concat(jTextField1.getText().trim());
                sendData = sentence.trim().getBytes();
                DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, 9876);
                clientSocket.send(sendPacket);
                DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
//                System.out.println(clientSocket.getPort());
                clientSocket.receive(receivePacket);
//                System.out.println(clientSocket.getPort());
                String modifiedSentence = new String(receivePacket.getData());
                for (char ch : modifiedSentence.toCharArray()) 
                   frequencies.put(ch, frequencies.getOrDefault(ch, 0) + 1);
                String result="";
//                for (char i : frequencies.keySet()){
//                    result+="Frequency of "+i+" is "+ );
//                }
                for (Map.Entry<Character, Integer> entry : frequencies.entrySet()) {
                    char key = entry.getKey();
                    System.out.println("Key= "+key);
                    int value = entry.getValue();
                    if(key!=' ')
                        result+="Frequency of "+key+" is "+value+"\n";
// ...
}
//                jLabel2.setText("Vowels in the given text are: - "+modifiedSentence);
                System.out.println("Consonants are:- " + modifiedSentence);
//                jLabel2.setText("Consonants in the given text are: - "+modifiedSentence);
                jTextField1.setText("");
                                    JOptionPane.showMessageDialog(null, result);

                clientSocket.close();
                } catch (Exception ex) {
//                    Logger.getLogger(client1.class.getName()).log(Level.SEVERE, null, ex);
                    System.out.println("exception:- "+ex);
                }
                //make a call to the server.
                //print the answer
                break;
            default:
                jLabel2.setText("Please choose an option.");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(client2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(client2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(client2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(client2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new client2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
